#
name: Create and publish a Docker image

on:
    push:
        tags: '*'
        branches:
            - main

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
    security:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@master
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/node@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            command: monitor

    build-and-push-image:
        runs-on: ubuntu-latest
        # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
        permissions:
            contents: read
            packages: write
            #
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
            # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
            # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step. 
            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v3
              with:
                  context: .
                  push: true
                  file: ./Dockerfile
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    deploy:
        needs: build-and-push-image
        runs-on: ubuntu-latest
        permissions:
          contents: read
          packages: read
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
          - name: Creation du fichier .env file
            run: |
              touch .env
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
              echo "DIRECT_URL=${{ secrets.DIRECT_URL }}" >> .env
              echo "PORT=${{ vars.PORT }}" >> .env
              echo "EXPIRATION_JWT_ACCESS_TOKEN=${{ vars.EXPIRATION_JWT_ACCESS_TOKEN }}" >> .env
              echo "EXPIRATION_JWT_REFRESH_TOKEN=${{ vars.EXPIRATION_JWT_REFRESH_TOKEN }}" >> .env
              echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
              echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env
              echo "MAILGUN_KEY=${{ secrets.MAILGUN_KEY }}" >> .env
              echo "MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}" >> .env
              echo "MAILGUN_FROM=${{ secrets.MAILGUN_FROM }}" >> .env
          - name: Verify .env file
            run: cat .env
          - name: copy .env and docker-compose.yml
            uses: appleboy/scp-action@v0.1.7
            with:
              host: ${{ secrets.SSH_HOST }}
              username: ${{ secrets.SSH_USERNAME }}
              key: ${{ secrets.SSH_KEY }}
              source: ".env,docker-compose.yml"
              target: "~/${{ secrets.SSH_USERNAME }}/"
          - name: executing remote ssh commands
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.SSH_HOST }}
              username: ${{ secrets.SSH_USERNAME }}
              key: ${{ secrets.SSH_KEY }}
              script: |
                cd ~/${{ secrets.SSH_USERNAME }}
                echo ${{ secrets.REGISTRY_KEY }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
                docker compose up -d --remove-orphans --force-recreate