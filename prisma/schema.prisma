generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                    String               @id @unique @default(cuid())
  name                  String
  address               String
  description           String
  price                 PriceCategory
  n_siret               String
  phone                 String
  code_postal           String
  city                  String
  email                 String
  coordinates           String
  opening_hours         String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime?            @updatedAt
  restaurateurProfileId String?
  favorites             Favorite[]
  reservations          Reservation[]
  RestaurateurProfile   RestaurateurProfile? @relation(fields: [restaurateurProfileId], references: [id])
  features              RestaurantFeature[]  @relation("RestaurantToRestaurantFeature")
}

model Favorite {
  id           String      @id @unique @default(cuid())
  userId       String
  restaurantId String
  createdAt    DateTime    @default(now())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  user         UserProfile @relation(fields: [userId], references: [id])
}

model Reservation {
  id           String            @id @unique @default(cuid())
  date         DateTime
  nb_people    Int
  status       ReservationStatus
  userId       String?
  restaurantId String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime?         @updatedAt
  restaurant   Restaurant        @relation(fields: [restaurantId], references: [id])
  user         UserProfile?      @relation(fields: [userId], references: [id])
}

model RestaurantFeature {
  id         String       @id @unique @default(cuid())
  name       String
  icon       String?
  categoryId String
  category   Category     @relation(fields: [categoryId], references: [id])
  restaurant Restaurant[] @relation("RestaurantToRestaurantFeature")
}

model Category {
  id      String              @id @unique @default(cuid())
  name    String
  feature RestaurantFeature[]
}

model Auth {
  id        String   @id @unique @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role
}

model UserProfile {
  id          String        @id @unique
  name        String
  phone       String?
  avatar      String?
  banner      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  favorite    Favorite[]
  reservation Reservation[]
}

model RestaurateurProfile {
  id          String       @id @unique
  avatar      String?
  banner      String?
  name        String
  phone       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  restaurants Restaurant[]
}

enum Role {
  USER
  RESTAURATEUR
  ADMIN
}

enum ReservationStatus {
  PENDING
  ACCEPTED
  CANCELED
  REFUSED
}

enum PriceCategory {
  ECO
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
