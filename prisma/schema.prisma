// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id           String                @id @unique @default(cuid())
  name         String
  address      String
  description  String
  price        PriceCategory
  n_siret      String
  phone        String
  code_postal  String
  city         String
  email        String
  features     RestaurantFeature[]
  favorites    Favorite[]
  reservations Reservation[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime?             @updatedAt
  restaurateur RestaurateurProfile[]
}

model Favorite {
  id           String       @id @unique @default(cuid())
  user         UserProfile? @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    DateTime     @default(now())
}

model Reservation {
  id           String            @id @unique @default(cuid())
  date         DateTime
  nb_people    Int
  status       ReservationStatus
  user         UserProfile?      @relation(fields: [userId], references: [id])
  userId       String?
  restaurant   Restaurant        @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime?         @updatedAt
}

model RestaurantFeature {
  id         String       @id @unique @default(cuid())
  name       String
  icon       String?
  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId String
  restaurant Restaurant[]
}

model Category {
  id      String              @id @unique @default(cuid())
  name    String
  feature RestaurantFeature[]
}

model Auth {
  id        String   @id @unique @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role
}

model UserProfile {
  // id of the auth
  id String @id @unique

  name   String
  phone  String?
  //
  avatar String?
  banner String?

  favorite    Favorite[]
  reservation Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RestaurateurProfile {
  // id of the auth
  id String @id @unique

  avatar String?
  banner String?
  name   String

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  RESTAURATEUR
  ADMIN
}

enum ReservationStatus {
  PENDING
  ACCEPTED
  CANCELED
  REFUSED
}

enum PriceCategory {
  ECO
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
